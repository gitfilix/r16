my react 16 course notes
------------------------

'npm start' to start the bundeler.



Functional components
----------------------
(also referred to as "presentational", "dumb" or "stateless" components

schema:
const cmp = () => {
  return <div>some JSX</div>
}

---> do as often as possible: fuctional/ presentational component
(here you do NOT update the state)


class-based components
----------------------
(also referred to as "containers", "smart" or "stateful" components)
 schema:
class Cmp extends Component {
  render () {
    return
      <div>some JSX</div>
    }
}
 here its 'this.props'



 Javascript object are REFERECED Typed
-> make always a copy if you want to mutate it.


StateFULL Component
-------------------
class y extends component
access to state
lifecycle hooks
access state / props via 'this'

-> modify state or access lifecycle hooks in StateFULL


Stateless Component
-------------------

const xz = (props) =>

NO access to State
NO lifecycle hooks
access props via 'props'


lifecycles
-----------------
constructor(props) -> you may initiate state here

componentWillMount (mostly depricated) -> update state, optimisations

render() ->  prepare & structure your jsx code

after render:
componentDidMount -> NO state changes


componentWillReceiveProps(nextProps) -> sync state to props

shouldComponentUpdate(nextProps / nextState) -> decide, continue or not. true/false: no rerender

comonentWillUpdate (nextProps / nextState)

after render: update Child component Props

Pure Component
-------------------
PureComponent - component without the shouldComponentUpdate lifecycle in it.
Only use it if updates are never reqiuered


Higher Order Component (hoc)
----------------------------
they are NOT representational - they wrap other components



setState is called asynchronously by react.
therefore you should rely on the prevState, nextState



Object.keys(props.ingredients):
creates an Object with props

 Array(props):
 creates an array with 
